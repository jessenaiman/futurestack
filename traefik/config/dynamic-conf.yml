# Dynamic configuration for Traefik
# This file contains configurations that can change during runtime.
# Only global middlewares, TLS options, and configurations for services NOT managed by docker-compose.traefik.yml are kept here.

http:
  middlewares:
    # Security headers middleware
    securityHeaders:
      headers:
        frameDeny: true
        contentTypeNosniff: true
        browserXssFilter: true
        contentSecurityPolicy: "default-src 'self'; img-src 'self' data:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
        referrerPolicy: "strict-origin-when-cross-origin"
        permissionsPolicy: "camera=(), microphone=(), geolocation=()"
        stsSeconds: 31536000
        stsIncludeSubdomains: true
        stsPreload: true
        forceSTSHeader: true

    # Basic authentication for the dashboard
    auth:
      basicAuth:
        users:
          - "admin:$apr1$SMSYIw8k$UJ9shoozPvSbiwbxT1bez0" # Updated secure password hash

    # Rate limiting middleware
    rateLimit:
      ratelimit:
        average: 100
        burst: 50
        period: 1s

    # IP Whitelisting middleware - customize with your trusted IPs
    ipWhiteList:
      ipWhiteList:
        sourceRange:
          - "127.0.0.1/32"
          - "10.0.0.0/8"
          - "172.16.0.0/12"
          - "192.168.0.0/16"

    # Compression middleware
    compress:
      compress: {}

    # Default redirect to HTTPS
    https-redirect:
      redirectScheme:
        scheme: https
        permanent: true

    # Retry middleware for transient errors (optional, keep if desired)
    retry:
      retry:
        attempts: 3
        initialInterval: "500ms"

    # WebSocket support middleware
    websocket:
      headers:
        customRequestHeaders:
          X-Forwarded-Proto: "https"
        customResponseHeaders:
          Strict-Transport-Security: "max-age=31536000"

    # Redirect middleware for www to non-www
    redirect-www-to-non-www:
      redirectRegex:
        regex: "^(http|https)://www\\.(.+)$"
        replacement: "${1}://${2}"
        permanent: true

  # Services section
  # Keep only services NOT managed by docker-compose labels
  services:
    autogen-service:
      loadBalancer:
        servers:
          - url: "http://autogen:5000" # Assuming autogen runs on 5000 based on services.yml
        passHostHeader: true

    rabbitholes-service:
      loadBalancer:
        servers:
          - url: "http://rabbitholes:3001" # Assuming rabbitholes runs on 3001
        passHostHeader: true

  # Routers section with DuckDNS domains
  # Keep only routers for services NOT managed by docker-compose labels
  routers:
    # Autogen router
    autogen-router:
      rule: "Host(`autogen.future-stack.duckdns.org`)"
      service: autogen-service
      middlewares:
        - compress

    # RabbitHoles router
    rabbitholes-router:
      rule: "Host(`rabbitholes.future-stack.duckdns.org`)"
      service: rabbitholes-service
      middlewares:
        - compress
      entrypoints: websecure # Assuming secure access
      tls: # Assuming TLS via duckdns resolver
        certResolver: duckdns

# Server transports section remains at root level
tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
        - TLS_AES_128_GCM_SHA256
        - TLS_AES_256_GCM_SHA384
        - TLS_CHACHA20_POLY1305_SHA256
      curvePreferences:
        - CurveP521
        - CurveP384
        - CurveP256
      sniStrict: true

serversTransports:
  websocket:
    forwardingTimeouts:
      dialTimeout: 30s
      responseHeaderTimeout: 30s
      idleConnTimeout: 1h

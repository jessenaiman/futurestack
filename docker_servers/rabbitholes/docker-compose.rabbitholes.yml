# NOTE: Building from source requires the source code to be in a directory
# OUTSIDE the main future-stack project, referenced by the build context path.
# Alternatively, use a pre-built Docker image if available.
services:
  rabbitholes:
    build:
      context: ${RABBITHOLES_BUILD_CONTEXT}
      dockerfile: ${RABBITHOLES_DOCKERFILE:-Dockerfile}
    container_name: ${RABBITHOLES_CONTAINER_NAME:-rabbitholes}
    environment:
      - PORT=${RABBITHOLES_PORT:-3001}
      - NODE_ENV=${NODE_ENV:-production}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - GOOGLE_AI_MODEL=${GOOGLE_AI_MODEL}
      - DATABASE_URL=${RABBITHOLES_DATABASE_URL}
    networks:
      - server-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${RABBITHOLES_PORT:-3001}/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitholes.rule=Host(`rabbitholes.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.rabbitholes.entrypoints=websecure"
      - "traefik.http.routers.rabbitholes.tls=true"
      - "traefik.http.routers.rabbitholes.tls.certresolver=letsencrypt"
      - "traefik.http.routers.rabbitholes.middlewares=basicauth@file"
      - "traefik.http.services.rabbitholes.loadbalancer.server.port=${RABBITHOLES_PORT:-3001}"
    restart: unless-stopped

networks:
  server-net:
    external: true

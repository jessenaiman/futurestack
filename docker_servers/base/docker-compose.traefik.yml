services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: always
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:${TRAEFIK_HTTP_PORT:-80}"
      - "${TRAEFIK_HTTPS_PORT:-443}:${TRAEFIK_HTTPS_PORT:-443}"
      - "127.0.0.1:${TRAEFIK_DASHBOARD_PORT:-8080}:8080" # Dashboard port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker_servers/traefik/config:/etc/traefik/config:ro # Dynamic configuration relative to project root
      - ./docker_servers/traefik/certs:/etc/certs # SSL certificates (if manually managed) relative to project root
      - ./docker_servers/traefik/acme:/etc/traefik/acme # Let's Encrypt certificates relative to project root
    # Networks will be connected via the root docker-compose.yml or by services explicitly joining them.
    # This service itself will be attached to server-net and traefik-net by the root docker-compose.yml.
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=server-net" # Tell Traefik to look for services on server-net
      - "--providers.file.directory=/etc/traefik/config" # Path to dynamic configuration files
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:${TRAEFIK_HTTP_PORT:-80}"
      - "--entrypoints.websecure.address=:${TRAEFIK_HTTPS_PORT:-443}"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Choose one challenge type:
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true" # Preferred for most setups
      # - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      # - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--accesslog=true"
      - "--accesslog.filepath=/etc/traefik/access.log" # Store access logs
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}" # Set log level (INFO, DEBUG, ERROR)
      - "--metrics.prometheus=true" # Enable Prometheus metrics
      - "--metrics.prometheus.entryPoint=metrics" # Define metrics entrypoint
    labels:
      - "traefik.enable=true" # This label is for Traefik to discover itself if needed, usually not required for the proxy itself.
      # Traefik Dashboard
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.middlewares=auth@file" # Assumes auth middleware defined in traefik/config/dynamic-conf.yml
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      # Metrics endpoint (if you want to expose it via Traefik, otherwise it's internal)
      - "traefik.http.routers.traefik-metrics.rule=Host(`traefik.${DOMAIN:-localhost}`) && PathPrefix(`/metrics`)"
      - "traefik.http.routers.traefik-metrics.service=prometheus@internal" # Requires Prometheus service to be defined or use api@internal if metrics are on dashboard
      - "traefik.http.routers.traefik-metrics.entrypoints=websecure"
      - "traefik.http.routers.traefik-metrics.middlewares=auth@file"
      - "traefik.http.routers.traefik-metrics.tls=true"
      - "traefik.http.routers.traefik-metrics.tls.certresolver=letsencrypt"